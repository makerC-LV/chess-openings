{"id":"node_modules/chess/dist/algebraicGameClient.js","dependencies":[{"name":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/shiva/VSCodeProjects/chess-openings/package.json","includedInParent":true,"mtime":1579734359778},{"name":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/package.json","includedInParent":true,"mtime":1579734224743},{"name":"@babel/runtime-corejs2/helpers/interopRequireDefault","loc":{"line":3,"column":37},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault.js"},{"name":"@babel/runtime-corejs2/core-js/object/define-property","loc":{"line":5,"column":37},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/core-js/object/define-property.js"},{"name":"@babel/runtime-corejs2/helpers/classCallCheck","loc":{"line":13,"column":54},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/classCallCheck.js"},{"name":"@babel/runtime-corejs2/helpers/createClass","loc":{"line":15,"column":51},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/createClass.js"},{"name":"@babel/runtime-corejs2/helpers/possibleConstructorReturn","loc":{"line":17,"column":65},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/possibleConstructorReturn.js"},{"name":"@babel/runtime-corejs2/helpers/getPrototypeOf","loc":{"line":19,"column":54},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/getPrototypeOf.js"},{"name":"@babel/runtime-corejs2/helpers/inherits","loc":{"line":21,"column":48},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/inherits.js"},{"name":"@babel/runtime-corejs2/core-js/object/keys","loc":{"line":23,"column":43},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/core-js/object/keys.js"},{"name":"./piece","loc":{"line":25,"column":21},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/piece.js"},{"name":"events","loc":{"line":27,"column":22},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/events/events.js"},{"name":"./game","loc":{"line":29,"column":20},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/game.js"},{"name":"./gameValidation","loc":{"line":31,"column":30},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/algebraicGameClient.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/gameValidation.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.AlgebraicGameClient = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _piece = require(\"./piece\");\n\nvar _events = require(\"events\");\n\nvar _game = require(\"./game\");\n\nvar _gameValidation = require(\"./gameValidation\");\n\n// private methods\nfunction getNotationPrefix(src, dest, movesForPiece) {\n  var containsDest = function containsDest(squares) {\n    var n = 0;\n\n    for (n = 0; n < squares.length; n++) {\n      if (squares[n] === dest) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n      file = '',\n      fileHash = {},\n      i = 0,\n      prefix = src.piece.notation,\n      rank = 0,\n      rankHash = {};\n\n  for (i = 0; i < movesForPiece.length; i++) {\n    if (containsDest(movesForPiece[i].squares)) {\n      file = movesForPiece[i].src.file;\n      rank = movesForPiece[i].src.rank;\n      fileHash[file] = typeof fileHash[file] !== 'undefined' ? fileHash[file] + 1 : 1;\n      rankHash[rank] = typeof rankHash[rank] !== 'undefined' ? rankHash[rank] + 1 : 1;\n    }\n  }\n\n  if ((0, _keys[\"default\"])(fileHash).length > 1) {\n    prefix += src.file;\n  }\n\n  if ((0, _keys[\"default\"])(rankHash).length > (0, _keys[\"default\"])(fileHash).length) {\n    prefix += src.rank;\n  }\n\n  return prefix;\n}\n\nfunction getValidMovesByPieceType(pieceType, validMoves) {\n  var byPiece = [],\n      i = 0;\n\n  for (i = 0; i < validMoves.length; i++) {\n    if (validMoves[i].src.piece.type === pieceType) {\n      byPiece.push(validMoves[i]);\n    }\n  }\n\n  return byPiece;\n}\n\nfunction notate(validMoves, gameClient) {\n  var algebraicNotation = {},\n      i = 0,\n      isPromotion = false,\n      movesForPiece = [],\n      n = 0,\n      p = null,\n      prefix = '',\n      sq = null,\n      suffix = ''; // iterate through each starting squares valid moves\n\n  for (i = 0; i < validMoves.length; i++) {\n    p = validMoves[i].src.piece; // iterate each potential move and build prefix and suffix for notation\n\n    for (n = 0; n < validMoves[i].squares.length; n++) {\n      prefix = '';\n      sq = validMoves[i].squares[n]; // set suffix for notation\n\n      suffix = (sq.piece ? 'x' : '') + sq.file + sq.rank; // check for potential promotion\n\n      /* eslint no-magic-numbers: 0 */\n\n      isPromotion = (sq.rank === 8 || sq.rank === 1) && p.type === _piece.PieceType.Pawn; // squares with pawns\n\n      if (sq.piece && p.type === _piece.PieceType.Pawn) {\n        prefix = validMoves[i].src.file;\n      } // squares with Bishop, Knight, Queen or Rook pieces\n\n\n      if (p.type === _piece.PieceType.Bishop || p.type === _piece.PieceType.Knight || p.type === _piece.PieceType.Queen || p.type === _piece.PieceType.Rook) {\n        // if there is more than 1 of the specified piece on the board,\n        // can more than 1 land on the specified square?\n        movesForPiece = getValidMovesByPieceType(p.type, validMoves);\n\n        if (movesForPiece.length > 1) {\n          prefix = getNotationPrefix(validMoves[i].src, sq, movesForPiece);\n        } else {\n          prefix = validMoves[i].src.piece.notation;\n        }\n      } // squares with a King piece\n\n\n      if (p.type === _piece.PieceType.King) {\n        // look for castle left and castle right\n        if (validMoves[i].src.file === 'e' && sq.file === 'g') {\n          // fix for issue #13 - if PGN is specified should be letters, not numbers\n          prefix = gameClient.PGN ? 'O-O' : '0-0';\n          suffix = '';\n        } else if (validMoves[i].src.file === 'e' && sq.file === 'c') {\n          // fix for issue #13 - if PGN is specified should be letters, not numbers\n          prefix = gameClient.PGN ? 'O-O-O' : '0-0-0';\n          suffix = '';\n        } else {\n          prefix = validMoves[i].src.piece.notation;\n        }\n      } // set the notation\n\n\n      if (isPromotion) {\n        // Rook promotion\n        algebraicNotation[prefix + suffix + 'R'] = {\n          dest: sq,\n          src: validMoves[i].src\n        }; // Knight promotion\n\n        algebraicNotation[prefix + suffix + 'N'] = {\n          dest: sq,\n          src: validMoves[i].src\n        }; // Bishop promotion\n\n        algebraicNotation[prefix + suffix + 'B'] = {\n          dest: sq,\n          src: validMoves[i].src\n        }; // Queen promotion\n\n        algebraicNotation[prefix + suffix + 'Q'] = {\n          dest: sq,\n          src: validMoves[i].src\n        };\n      } else {\n        algebraicNotation[prefix + suffix] = {\n          dest: sq,\n          src: validMoves[i].src\n        };\n      }\n    }\n  }\n\n  return algebraicNotation;\n}\n\nfunction parseNotation(notation) {\n  var parseDest = ''; // try and parse the notation\n\n  parseDest = notation.substring(notation.length - 2);\n\n  if (notation.length > 2) {\n    return notation.charAt(0) + parseDest;\n  }\n\n  return '';\n}\n\nfunction updateGameClient(gameClient) {\n  gameClient.validation.start(function (err, result) {\n    if (err) {\n      throw new Error(err);\n    }\n\n    gameClient.isCheck = result.isCheck;\n    gameClient.isCheckmate = result.isCheckmate;\n    gameClient.isRepetition = result.isRepetition;\n    gameClient.isStalemate = result.isStalemate;\n    gameClient.notatedMoves = notate(result.validMoves, gameClient);\n    gameClient.validMoves = result.validMoves;\n  });\n}\n\nvar AlgebraicGameClient =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  (0, _inherits2[\"default\"])(AlgebraicGameClient, _EventEmitter);\n\n  function AlgebraicGameClient(game, opts) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, AlgebraicGameClient);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(AlgebraicGameClient).call(this));\n    _this.game = game;\n    _this.isCheck = false;\n    _this.isCheckmate = false;\n    _this.isRepetition = false;\n    _this.isStalemate = false;\n    _this.notatedMoves = {}; // for issue #13, adding options allowing consumers to specify\n    // PGN (Portable Game Notation)... essentially, this makes castle moves\n    // appear as capital letter O rather than the number 0\n\n    _this.PGN = opts && typeof opts.PGN === 'boolean' ? opts.PGN : false;\n    _this.validMoves = [];\n    _this.validation = _gameValidation.GameValidation.create(_this.game); // bubble the game check event\n\n    _this.game.on('check', function (attackers) {\n      return _this.emit('check', attackers);\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(AlgebraicGameClient, [{\n    key: \"getStatus\",\n    value: function getStatus(forceUpdate) {\n      if (forceUpdate) {\n        updateGameClient(this);\n      }\n\n      return {\n        board: this.game.board,\n        isCheck: this.isCheck,\n        isCheckmate: this.isCheckmate,\n        isRepetition: this.isRepetition,\n        isStalemate: this.isStalemate,\n        notatedMoves: this.notatedMoves\n      };\n    }\n  }, {\n    key: \"move\",\n    value: function move(notation, isFuzzy) {\n      var move = null,\n          notationRegex = /^[BKQNR]?[a-h]?[1-8]?[x-]?[a-h][1-8][+#]?$/,\n          p = null,\n          promo = '',\n          side = this.game.getCurrentSide();\n\n      if (notation && typeof notation === 'string') {\n        // clean notation of extra or alternate chars\n        notation = notation.replace(/\\!/g, '').replace(/\\+/g, '').replace(/\\#/g, '').replace(/\\=/g, '').replace(/\\\\/g, ''); // fix for issue #13 - if PGN is specified, should be letters not numbers\n\n        if (this.PGN) {\n          notation = notation.replace(/0/g, 'O');\n        } else {\n          notation = notation.replace(/O/g, '0');\n        } // check for pawn promotion\n\n\n        if (notation.charAt(notation.length - 1).match(/[BNQR]/)) {\n          promo = notation.charAt(notation.length - 1);\n        } // use it directly or attempt to parse it if not found\n\n\n        if (this.notatedMoves[notation]) {\n          move = this.game.board.move(this.notatedMoves[notation].src, this.notatedMoves[notation].dest, notation);\n        } else if (notation.match(notationRegex) && notation.length > 1 && !isFuzzy) {\n          return this.move(parseNotation(notation), true);\n        } else if (isFuzzy) {\n          throw new Error(\"Invalid move (\".concat(notation, \")\"));\n        }\n\n        if (move) {\n          // apply pawn promotion\n          if (promo) {\n            switch (promo) {\n              case 'B':\n                p = _piece.Piece.createBishop(side);\n                break;\n\n              case 'N':\n                p = _piece.Piece.createKnight(side);\n                break;\n\n              case 'Q':\n                p = _piece.Piece.createQueen(side);\n                break;\n\n              case 'R':\n                p = _piece.Piece.createRook(side);\n                break;\n\n              default:\n                p = _piece.Piece.createPawn(side);\n            }\n\n            if (p) {\n              this.game.board.promote(move.move.postSquare, p);\n              /*\n              p.moveCount = move.move.postSquare.piece.moveCount;\n              move.move.postSquare.piece = p;\n              //*/\n            }\n          }\n\n          updateGameClient(this);\n          return move;\n        }\n      }\n\n      throw new Error(\"Notation is invalid (\".concat(notation, \")\"));\n    }\n  }], [{\n    key: \"create\",\n    value: function create(opts) {\n      var game = _game.Game.create(),\n          gameClient = new AlgebraicGameClient(game, opts);\n\n      updateGameClient(gameClient);\n      return gameClient;\n    }\n  }]);\n  return AlgebraicGameClient;\n}(_events.EventEmitter);\n\nexports.AlgebraicGameClient = AlgebraicGameClient;\nvar _default = {\n  AlgebraicGameClient: AlgebraicGameClient\n};\nexports[\"default\"] = _default;\n\n"},"sourceMaps":{"js":{"version":3,"sources":["algebraicGameClient.js"],"names":["getNotationPrefix","src","dest","movesForPiece","containsDest","squares","n","length","file","fileHash","i","prefix","piece","notation","rank","rankHash","getValidMovesByPieceType","pieceType","validMoves","byPiece","type","push","notate","gameClient","algebraicNotation","isPromotion","p","sq","suffix","PieceType","Pawn","Bishop","Knight","Queen","Rook","King","PGN","parseNotation","parseDest","substring","charAt","updateGameClient","validation","start","err","result","Error","isCheck","isCheckmate","isRepetition","isStalemate","notatedMoves","AlgebraicGameClient","game","opts","GameValidation","create","on","attackers","emit","forceUpdate","board","isFuzzy","move","notationRegex","promo","side","getCurrentSide","replace","match","Piece","createBishop","createKnight","createQueen","createRook","createPawn","promote","postSquare","Game","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA,SAASA,iBAAT,CAA4BC,GAA5B,EAAiCC,IAAjC,EAAuCC,aAAvC,EAAsD;AACrD,MACCC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAa;AAC3B,QAAIC,CAAC,GAAG,CAAR;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,OAAO,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAID,OAAO,CAACC,CAAD,CAAP,KAAeJ,IAAnB,EAAyB;AACxB,eAAO,IAAP;AACA;AACD;;AAED,WAAO,KAAP;AACA,GAXF;AAAA,MAYCM,IAAI,GAAG,EAZR;AAAA,MAaCC,QAAQ,GAAG,EAbZ;AAAA,MAcCC,CAAC,GAAG,CAdL;AAAA,MAeCC,MAAM,GAAGV,GAAG,CAACW,KAAJ,CAAUC,QAfpB;AAAA,MAgBCC,IAAI,GAAG,CAhBR;AAAA,MAiBCC,QAAQ,GAAG,EAjBZ;;AAmBA,OAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,aAAa,CAACI,MAA9B,EAAsCG,CAAC,EAAvC,EAA2C;AAC1C,QAAIN,YAAY,CAACD,aAAa,CAACO,CAAD,CAAb,CAAiBL,OAAlB,CAAhB,EAA4C;AAC3CG,MAAAA,IAAI,GAAGL,aAAa,CAACO,CAAD,CAAb,CAAiBT,GAAjB,CAAqBO,IAA5B;AACAM,MAAAA,IAAI,GAAGX,aAAa,CAACO,CAAD,CAAb,CAAiBT,GAAjB,CAAqBa,IAA5B;AAEAL,MAAAA,QAAQ,CAACD,IAAD,CAAR,GAAkB,OAAOC,QAAQ,CAACD,IAAD,CAAf,KAA0B,WAA1B,GAAwCC,QAAQ,CAACD,IAAD,CAAR,GAAiB,CAAzD,GAA6D,CAA/E;AACAO,MAAAA,QAAQ,CAACD,IAAD,CAAR,GAAkB,OAAOC,QAAQ,CAACD,IAAD,CAAf,KAA0B,WAA1B,GAAwCC,QAAQ,CAACD,IAAD,CAAR,GAAiB,CAAzD,GAA6D,CAA/E;AACA;AACD;;AAED,MAAI,sBAAYL,QAAZ,EAAsBF,MAAtB,GAA+B,CAAnC,EAAsC;AACrCI,IAAAA,MAAM,IAAIV,GAAG,CAACO,IAAd;AACA;;AAED,MAAI,sBAAYO,QAAZ,EAAsBR,MAAtB,GAA+B,sBAAYE,QAAZ,EAAsBF,MAAzD,EAAiE;AAChEI,IAAAA,MAAM,IAAIV,GAAG,CAACa,IAAd;AACA;;AAED,SAAOH,MAAP;AACA;;AAED,SAASK,wBAAT,CAAmCC,SAAnC,EAA8CC,UAA9C,EAA0D;AACzD,MACCC,OAAO,GAAG,EADX;AAAA,MAECT,CAAC,GAAG,CAFL;;AAIA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGQ,UAAU,CAACX,MAA3B,EAAmCG,CAAC,EAApC,EAAwC;AACvC,QAAIQ,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBW,KAAlB,CAAwBQ,IAAxB,KAAiCH,SAArC,EAAgD;AAC/CE,MAAAA,OAAO,CAACE,IAAR,CAAaH,UAAU,CAACR,CAAD,CAAvB;AACA;AACD;;AAED,SAAOS,OAAP;AACA;;AAED,SAASG,MAAT,CAAiBJ,UAAjB,EAA6BK,UAA7B,EAAyC;AACxC,MACCC,iBAAiB,GAAG,EADrB;AAAA,MAECd,CAAC,GAAG,CAFL;AAAA,MAGCe,WAAW,GAAG,KAHf;AAAA,MAICtB,aAAa,GAAG,EAJjB;AAAA,MAKCG,CAAC,GAAG,CALL;AAAA,MAMCoB,CAAC,GAAG,IANL;AAAA,MAOCf,MAAM,GAAG,EAPV;AAAA,MAQCgB,EAAE,GAAG,IARN;AAAA,MASCC,MAAM,GAAG,EATV,CADwC,CAYxC;;AACA,OAAKlB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGQ,UAAU,CAACX,MAA3B,EAAmCG,CAAC,EAApC,EAAwC;AACvCgB,IAAAA,CAAC,GAAGR,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBW,KAAtB,CADuC,CAGvC;;AACA,SAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,UAAU,CAACR,CAAD,CAAV,CAAcL,OAAd,CAAsBE,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAClDK,MAAAA,MAAM,GAAG,EAAT;AACAgB,MAAAA,EAAE,GAAGT,UAAU,CAACR,CAAD,CAAV,CAAcL,OAAd,CAAsBC,CAAtB,CAAL,CAFkD,CAIlD;;AACAsB,MAAAA,MAAM,GAAG,CAACD,EAAE,CAACf,KAAH,GAAW,GAAX,GAAiB,EAAlB,IAAwBe,EAAE,CAACnB,IAA3B,GAAkCmB,EAAE,CAACb,IAA9C,CALkD,CAOlD;;AACA;;AACAW,MAAAA,WAAW,GACV,CAACE,EAAE,CAACb,IAAH,KAAY,CAAZ,IAAiBa,EAAE,CAACb,IAAH,KAAY,CAA9B,KACAY,CAAC,CAACN,IAAF,KAAWS,iBAAUC,IAFtB,CATkD,CAalD;;AACA,UAAIH,EAAE,CAACf,KAAH,IAAYc,CAAC,CAACN,IAAF,KAAWS,iBAAUC,IAArC,EAA2C;AAC1CnB,QAAAA,MAAM,GAAGO,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBO,IAA3B;AACA,OAhBiD,CAkBlD;;;AACA,UAAIkB,CAAC,CAACN,IAAF,KAAWS,iBAAUE,MAArB,IACHL,CAAC,CAACN,IAAF,KAAWS,iBAAUG,MADlB,IAEHN,CAAC,CAACN,IAAF,KAAWS,iBAAUI,KAFlB,IAGHP,CAAC,CAACN,IAAF,KAAWS,iBAAUK,IAHtB,EAG4B;AAC3B;AACA;AACA/B,QAAAA,aAAa,GAAGa,wBAAwB,CAACU,CAAC,CAACN,IAAH,EAASF,UAAT,CAAxC;;AACA,YAAIf,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC7BI,UAAAA,MAAM,GAAGX,iBAAiB,CAACkB,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAf,EAAoB0B,EAApB,EAAwBxB,aAAxB,CAA1B;AACA,SAFD,MAEO;AACNQ,UAAAA,MAAM,GAAGO,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBW,KAAlB,CAAwBC,QAAjC;AACA;AACD,OA/BiD,CAiClD;;;AACA,UAAIa,CAAC,CAACN,IAAF,KAAWS,iBAAUM,IAAzB,EAA+B;AAC9B;AACA,YAAIjB,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBO,IAAlB,KAA2B,GAA3B,IAAkCmB,EAAE,CAACnB,IAAH,KAAY,GAAlD,EAAuD;AACtD;AACAG,UAAAA,MAAM,GAAGY,UAAU,CAACa,GAAX,GAAiB,KAAjB,GAAyB,KAAlC;AACAR,UAAAA,MAAM,GAAG,EAAT;AACA,SAJD,MAIO,IAAIV,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBO,IAAlB,KAA2B,GAA3B,IAAkCmB,EAAE,CAACnB,IAAH,KAAY,GAAlD,EAAuD;AAC7D;AACAG,UAAAA,MAAM,GAAGY,UAAU,CAACa,GAAX,GAAiB,OAAjB,GAA2B,OAApC;AACAR,UAAAA,MAAM,GAAG,EAAT;AACA,SAJM,MAIA;AACNjB,UAAAA,MAAM,GAAGO,UAAU,CAACR,CAAD,CAAV,CAAcT,GAAd,CAAkBW,KAAlB,CAAwBC,QAAjC;AACA;AACD,OA/CiD,CAiDlD;;;AACA,UAAIY,WAAJ,EAAiB;AAChB;AACAD,QAAAA,iBAAiB,CAACb,MAAM,GAAGiB,MAAT,GAAkB,GAAnB,CAAjB,GAA2C;AAC1C1B,UAAAA,IAAI,EAAGyB,EADmC;AAE1C1B,UAAAA,GAAG,EAAGiB,UAAU,CAACR,CAAD,CAAV,CAAcT;AAFsB,SAA3C,CAFgB,CAOhB;;AACAuB,QAAAA,iBAAiB,CAACb,MAAM,GAAGiB,MAAT,GAAkB,GAAnB,CAAjB,GAA2C;AAC1C1B,UAAAA,IAAI,EAAGyB,EADmC;AAE1C1B,UAAAA,GAAG,EAAGiB,UAAU,CAACR,CAAD,CAAV,CAAcT;AAFsB,SAA3C,CARgB,CAahB;;AACAuB,QAAAA,iBAAiB,CAACb,MAAM,GAAGiB,MAAT,GAAkB,GAAnB,CAAjB,GAA2C;AAC1C1B,UAAAA,IAAI,EAAGyB,EADmC;AAE1C1B,UAAAA,GAAG,EAAGiB,UAAU,CAACR,CAAD,CAAV,CAAcT;AAFsB,SAA3C,CAdgB,CAmBhB;;AACAuB,QAAAA,iBAAiB,CAACb,MAAM,GAAGiB,MAAT,GAAkB,GAAnB,CAAjB,GAA2C;AAC1C1B,UAAAA,IAAI,EAAGyB,EADmC;AAE1C1B,UAAAA,GAAG,EAAGiB,UAAU,CAACR,CAAD,CAAV,CAAcT;AAFsB,SAA3C;AAIA,OAxBD,MAwBO;AACNuB,QAAAA,iBAAiB,CAACb,MAAM,GAAGiB,MAAV,CAAjB,GAAqC;AACpC1B,UAAAA,IAAI,EAAGyB,EAD6B;AAEpC1B,UAAAA,GAAG,EAAGiB,UAAU,CAACR,CAAD,CAAV,CAAcT;AAFgB,SAArC;AAIA;AACD;AACD;;AAED,SAAOuB,iBAAP;AACA;;AAED,SAASa,aAAT,CAAwBxB,QAAxB,EAAkC;AACjC,MAAIyB,SAAS,GAAG,EAAhB,CADiC,CAGjC;;AACAA,EAAAA,SAAS,GAAGzB,QAAQ,CAAC0B,SAAT,CAAmB1B,QAAQ,CAACN,MAAT,GAAkB,CAArC,CAAZ;;AACA,MAAIM,QAAQ,CAACN,MAAT,GAAkB,CAAtB,EAAyB;AACxB,WAAOM,QAAQ,CAAC2B,MAAT,CAAgB,CAAhB,IAAqBF,SAA5B;AACA;;AAED,SAAO,EAAP;AACA;;AAED,SAASG,gBAAT,CAA2BlB,UAA3B,EAAuC;AACtCA,EAAAA,UAAU,CAACmB,UAAX,CAAsBC,KAAtB,CAA4B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC5C,QAAID,GAAJ,EAAS;AACR,YAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACA;;AAEDrB,IAAAA,UAAU,CAACwB,OAAX,GAAqBF,MAAM,CAACE,OAA5B;AACAxB,IAAAA,UAAU,CAACyB,WAAX,GAAyBH,MAAM,CAACG,WAAhC;AACAzB,IAAAA,UAAU,CAAC0B,YAAX,GAA0BJ,MAAM,CAACI,YAAjC;AACA1B,IAAAA,UAAU,CAAC2B,WAAX,GAAyBL,MAAM,CAACK,WAAhC;AACA3B,IAAAA,UAAU,CAAC4B,YAAX,GAA0B7B,MAAM,CAACuB,MAAM,CAAC3B,UAAR,EAAoBK,UAApB,CAAhC;AACAA,IAAAA,UAAU,CAACL,UAAX,GAAwB2B,MAAM,CAAC3B,UAA/B;AACA,GAXD;AAYA;;IAEYkC,mB;;;;;AACZ,+BAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA;AACxB;AAEA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKN,OAAL,GAAe,KAAf;AACA,UAAKC,WAAL,GAAmB,KAAnB;AACA,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKC,WAAL,GAAmB,KAAnB;AACA,UAAKC,YAAL,GAAoB,EAApB,CARwB,CASxB;AACA;AACA;;AACA,UAAKf,GAAL,GAAYkB,IAAI,IAAI,OAAOA,IAAI,CAAClB,GAAZ,KAAoB,SAA7B,GAA0CkB,IAAI,CAAClB,GAA/C,GAAqD,KAAhE;AACA,UAAKlB,UAAL,GAAkB,EAAlB;AACA,UAAKwB,UAAL,GAAkBa,+BAAeC,MAAf,CAAsB,MAAKH,IAA3B,CAAlB,CAdwB,CAgBxB;;AACA,UAAKA,IAAL,CAAUI,EAAV,CAAa,OAAb,EAAsB,UAACC,SAAD;AAAA,aAAgB,MAAKC,IAAL,CAAU,OAAV,EAAmBD,SAAnB,CAAhB;AAAA,KAAtB;;AAjBwB;AAkBxB;;;;8BAYUE,W,EAAa;AACvB,UAAIA,WAAJ,EAAiB;AAChBnB,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA;;AAED,aAAO;AACNoB,QAAAA,KAAK,EAAG,KAAKR,IAAL,CAAUQ,KADZ;AAENd,QAAAA,OAAO,EAAG,KAAKA,OAFT;AAGNC,QAAAA,WAAW,EAAG,KAAKA,WAHb;AAINC,QAAAA,YAAY,EAAG,KAAKA,YAJd;AAKNC,QAAAA,WAAW,EAAG,KAAKA,WALb;AAMNC,QAAAA,YAAY,EAAG,KAAKA;AANd,OAAP;AAQA;;;yBAEKtC,Q,EAAUiD,O,EAAS;AACxB,UACCC,IAAI,GAAG,IADR;AAAA,UAECC,aAAa,GAAG,4CAFjB;AAAA,UAGCtC,CAAC,GAAG,IAHL;AAAA,UAICuC,KAAK,GAAG,EAJT;AAAA,UAKCC,IAAI,GAAG,KAAKb,IAAL,CAAUc,cAAV,EALR;;AAOA,UAAItD,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC7C;AACAA,QAAAA,QAAQ,GAAGA,QAAQ,CACjBuD,OADS,CACD,KADC,EACM,EADN,EAETA,OAFS,CAED,KAFC,EAEM,EAFN,EAGTA,OAHS,CAGD,KAHC,EAGM,EAHN,EAITA,OAJS,CAID,KAJC,EAIM,EAJN,EAKTA,OALS,CAKD,KALC,EAKM,EALN,CAAX,CAF6C,CAS5C;;AACA,YAAI,KAAKhC,GAAT,EAAc;AACbvB,UAAAA,QAAQ,GAAGA,QAAQ,CAACuD,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAX;AACA,SAFD,MAEO;AACNvD,UAAAA,QAAQ,GAAGA,QAAQ,CAACuD,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAX;AACA,SAd2C,CAgB7C;;;AACA,YAAIvD,QAAQ,CAAC2B,MAAT,CAAgB3B,QAAQ,CAACN,MAAT,GAAkB,CAAlC,EAAqC8D,KAArC,CAA2C,QAA3C,CAAJ,EAA0D;AACzDJ,UAAAA,KAAK,GAAGpD,QAAQ,CAAC2B,MAAT,CAAgB3B,QAAQ,CAACN,MAAT,GAAkB,CAAlC,CAAR;AACA,SAnB4C,CAqB7C;;;AACA,YAAI,KAAK4C,YAAL,CAAkBtC,QAAlB,CAAJ,EAAiC;AAChCkD,UAAAA,IAAI,GAAG,KAAKV,IAAL,CAAUQ,KAAV,CAAgBE,IAAhB,CACN,KAAKZ,YAAL,CAAkBtC,QAAlB,EAA4BZ,GADtB,EAEN,KAAKkD,YAAL,CAAkBtC,QAAlB,EAA4BX,IAFtB,EAGNW,QAHM,CAAP;AAIA,SALD,MAKO,IAAIA,QAAQ,CAACwD,KAAT,CAAeL,aAAf,KAAiCnD,QAAQ,CAACN,MAAT,GAAkB,CAAnD,IAAwD,CAACuD,OAA7D,EAAsE;AAC5E,iBAAO,KAAKC,IAAL,CAAU1B,aAAa,CAACxB,QAAD,CAAvB,EAAmC,IAAnC,CAAP;AACA,SAFM,MAEA,IAAIiD,OAAJ,EAAa;AACnB,gBAAM,IAAIhB,KAAJ,yBAA2BjC,QAA3B,OAAN;AACA;;AAED,YAAIkD,IAAJ,EAAU;AACT;AACA,cAAIE,KAAJ,EAAW;AACV,oBAAQA,KAAR;AACC,mBAAK,GAAL;AACCvC,gBAAAA,CAAC,GAAG4C,aAAMC,YAAN,CAAmBL,IAAnB,CAAJ;AACA;;AACD,mBAAK,GAAL;AACCxC,gBAAAA,CAAC,GAAG4C,aAAME,YAAN,CAAmBN,IAAnB,CAAJ;AACA;;AACD,mBAAK,GAAL;AACCxC,gBAAAA,CAAC,GAAG4C,aAAMG,WAAN,CAAkBP,IAAlB,CAAJ;AACA;;AACD,mBAAK,GAAL;AACCxC,gBAAAA,CAAC,GAAG4C,aAAMI,UAAN,CAAiBR,IAAjB,CAAJ;AACA;;AACD;AACCxC,gBAAAA,CAAC,GAAG4C,aAAMK,UAAN,CAAiBT,IAAjB,CAAJ;AAdF;;AAiBA,gBAAIxC,CAAJ,EAAO;AACN,mBAAK2B,IAAL,CAAUQ,KAAV,CAAgBe,OAAhB,CAAwBb,IAAI,CAACA,IAAL,CAAUc,UAAlC,EAA8CnD,CAA9C;AACA;;;;AAIA;AACD;;AAEDe,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,iBAAOsB,IAAP;AACA;AACD;;AAED,YAAM,IAAIjB,KAAJ,gCAAkCjC,QAAlC,OAAN;AACA;;;2BAtGcyC,I,EAAM;AACpB,UACCD,IAAI,GAAGyB,WAAKtB,MAAL,EADR;AAAA,UAECjC,UAAU,GAAG,IAAI6B,mBAAJ,CAAwBC,IAAxB,EAA8BC,IAA9B,CAFd;;AAIAb,MAAAA,gBAAgB,CAAClB,UAAD,CAAhB;AAEA,aAAOA,UAAP;AACA;;;EA7BuCwD,oB;;;eA8H1B;AAAE3B,EAAAA,mBAAmB,EAAnBA;AAAF,C","sourcesContent":["import { Piece, PieceType } from './piece';\nimport { EventEmitter } from 'events';\nimport { Game } from './game';\nimport { GameValidation } from './gameValidation';\n\n// private methods\nfunction getNotationPrefix (src, dest, movesForPiece) {\n\tlet\n\t\tcontainsDest = (squares) => {\n\t\t\tlet n = 0;\n\n\t\t\tfor (n = 0; n < squares.length; n++) {\n\t\t\t\tif (squares[n] === dest) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\t\tfile = '',\n\t\tfileHash = {},\n\t\ti = 0,\n\t\tprefix = src.piece.notation,\n\t\trank = 0,\n\t\trankHash = {};\n\n\tfor (i = 0; i < movesForPiece.length; i++) {\n\t\tif (containsDest(movesForPiece[i].squares)) {\n\t\t\tfile = movesForPiece[i].src.file;\n\t\t\trank = movesForPiece[i].src.rank;\n\n\t\t\tfileHash[file] = (typeof fileHash[file] !== 'undefined' ? fileHash[file] + 1 : 1);\n\t\t\trankHash[rank] = (typeof rankHash[rank] !== 'undefined' ? rankHash[rank] + 1 : 1);\n\t\t}\n\t}\n\n\tif (Object.keys(fileHash).length > 1) {\n\t\tprefix += src.file;\n\t}\n\n\tif (Object.keys(rankHash).length > Object.keys(fileHash).length) {\n\t\tprefix += src.rank;\n\t}\n\n\treturn prefix;\n}\n\nfunction getValidMovesByPieceType (pieceType, validMoves) {\n\tlet\n\t\tbyPiece = [],\n\t\ti = 0;\n\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tif (validMoves[i].src.piece.type === pieceType) {\n\t\t\tbyPiece.push(validMoves[i]);\n\t\t}\n\t}\n\n\treturn byPiece;\n}\n\nfunction notate (validMoves, gameClient) {\n\tlet\n\t\talgebraicNotation = {},\n\t\ti = 0,\n\t\tisPromotion = false,\n\t\tmovesForPiece = [],\n\t\tn = 0,\n\t\tp = null,\n\t\tprefix = '',\n\t\tsq = null,\n\t\tsuffix = '';\n\n\t// iterate through each starting squares valid moves\n\tfor (i = 0; i < validMoves.length; i++) {\n\t\tp = validMoves[i].src.piece;\n\n\t\t// iterate each potential move and build prefix and suffix for notation\n\t\tfor (n = 0; n < validMoves[i].squares.length; n++) {\n\t\t\tprefix = '';\n\t\t\tsq = validMoves[i].squares[n];\n\n\t\t\t// set suffix for notation\n\t\t\tsuffix = (sq.piece ? 'x' : '') + sq.file + sq.rank;\n\n\t\t\t// check for potential promotion\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tisPromotion =\n\t\t\t\t(sq.rank === 8 || sq.rank === 1) &&\n\t\t\t\tp.type === PieceType.Pawn;\n\n\t\t\t// squares with pawns\n\t\t\tif (sq.piece && p.type === PieceType.Pawn) {\n\t\t\t\tprefix = validMoves[i].src.file;\n\t\t\t}\n\n\t\t\t// squares with Bishop, Knight, Queen or Rook pieces\n\t\t\tif (p.type === PieceType.Bishop ||\n\t\t\t\tp.type === PieceType.Knight ||\n\t\t\t\tp.type === PieceType.Queen ||\n\t\t\t\tp.type === PieceType.Rook) {\n\t\t\t\t// if there is more than 1 of the specified piece on the board,\n\t\t\t\t// can more than 1 land on the specified square?\n\t\t\t\tmovesForPiece = getValidMovesByPieceType(p.type, validMoves);\n\t\t\t\tif (movesForPiece.length > 1) {\n\t\t\t\t\tprefix = getNotationPrefix(validMoves[i].src, sq, movesForPiece);\n\t\t\t\t} else {\n\t\t\t\t\tprefix = validMoves[i].src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// squares with a King piece\n\t\t\tif (p.type === PieceType.King) {\n\t\t\t\t// look for castle left and castle right\n\t\t\t\tif (validMoves[i].src.file === 'e' && sq.file === 'g') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O' : '0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else if (validMoves[i].src.file === 'e' && sq.file === 'c') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O-O' : '0-0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else {\n\t\t\t\t\tprefix = validMoves[i].src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set the notation\n\t\t\tif (isPromotion) {\n\t\t\t\t// Rook promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'R'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc : validMoves[i].src\n\t\t\t\t};\n\n\t\t\t\t// Knight promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'N'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc : validMoves[i].src\n\t\t\t\t};\n\n\t\t\t\t// Bishop promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'B'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc : validMoves[i].src\n\t\t\t\t};\n\n\t\t\t\t// Queen promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'Q'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc : validMoves[i].src\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\talgebraicNotation[prefix + suffix] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc : validMoves[i].src\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn algebraicNotation;\n}\n\nfunction parseNotation (notation) {\n\tlet parseDest = '';\n\n\t// try and parse the notation\n\tparseDest = notation.substring(notation.length - 2);\n\tif (notation.length > 2) {\n\t\treturn notation.charAt(0) + parseDest;\n\t}\n\n\treturn '';\n}\n\nfunction updateGameClient (gameClient) {\n\tgameClient.validation.start((err, result) => {\n\t\tif (err) {\n\t\t\tthrow new Error(err);\n\t\t}\n\n\t\tgameClient.isCheck = result.isCheck;\n\t\tgameClient.isCheckmate = result.isCheckmate;\n\t\tgameClient.isRepetition = result.isRepetition;\n\t\tgameClient.isStalemate = result.isStalemate;\n\t\tgameClient.notatedMoves = notate(result.validMoves, gameClient);\n\t\tgameClient.validMoves = result.validMoves;\n\t});\n}\n\nexport class AlgebraicGameClient extends EventEmitter {\n\tconstructor (game, opts) {\n\t\tsuper();\n\n\t\tthis.game = game;\n\t\tthis.isCheck = false;\n\t\tthis.isCheckmate = false;\n\t\tthis.isRepetition = false;\n\t\tthis.isStalemate = false;\n\t\tthis.notatedMoves = {};\n\t\t// for issue #13, adding options allowing consumers to specify\n\t\t// PGN (Portable Game Notation)... essentially, this makes castle moves\n\t\t// appear as capital letter O rather than the number 0\n\t\tthis.PGN = (opts && typeof opts.PGN === 'boolean') ? opts.PGN : false;\n\t\tthis.validMoves = [];\n\t\tthis.validation = GameValidation.create(this.game);\n\n\t\t// bubble the game check event\n\t\tthis.game.on('check', (attackers) => (this.emit('check', attackers)));\n\t}\n\n\tstatic create (opts) {\n\t\tlet\n\t\t\tgame = Game.create(),\n\t\t\tgameClient = new AlgebraicGameClient(game, opts);\n\n\t\tupdateGameClient(gameClient);\n\n\t\treturn gameClient;\n\t}\n\n\tgetStatus (forceUpdate) {\n\t\tif (forceUpdate) {\n\t\t\tupdateGameClient(this);\n\t\t}\n\n\t\treturn {\n\t\t\tboard : this.game.board,\n\t\t\tisCheck : this.isCheck,\n\t\t\tisCheckmate : this.isCheckmate,\n\t\t\tisRepetition : this.isRepetition,\n\t\t\tisStalemate : this.isStalemate,\n\t\t\tnotatedMoves : this.notatedMoves\n\t\t};\n\t}\n\n\tmove (notation, isFuzzy) {\n\t\tlet\n\t\t\tmove = null,\n\t\t\tnotationRegex = /^[BKQNR]?[a-h]?[1-8]?[x-]?[a-h][1-8][+#]?$/,\n\t\t\tp = null,\n\t\t\tpromo = '',\n\t\t\tside = this.game.getCurrentSide();\n\n\t\tif (notation && typeof notation === 'string') {\n\t\t\t// clean notation of extra or alternate chars\n\t\t\tnotation = notation\n\t\t\t\t.replace(/\\!/g, '')\n\t\t\t\t.replace(/\\+/g, '')\n\t\t\t\t.replace(/\\#/g, '')\n\t\t\t\t.replace(/\\=/g, '')\n\t\t\t\t.replace(/\\\\/g, '');\n\n\t\t\t\t// fix for issue #13 - if PGN is specified, should be letters not numbers\n\t\t\t\tif (this.PGN) {\n\t\t\t\t\tnotation = notation.replace(/0/g, 'O');\n\t\t\t\t} else {\n\t\t\t\t\tnotation = notation.replace(/O/g, '0');\n\t\t\t\t}\n\n\t\t\t// check for pawn promotion\n\t\t\tif (notation.charAt(notation.length - 1).match(/[BNQR]/)) {\n\t\t\t\tpromo = notation.charAt(notation.length - 1);\n\t\t\t}\n\n\t\t\t// use it directly or attempt to parse it if not found\n\t\t\tif (this.notatedMoves[notation]) {\n\t\t\t\tmove = this.game.board.move(\n\t\t\t\t\tthis.notatedMoves[notation].src,\n\t\t\t\t\tthis.notatedMoves[notation].dest,\n\t\t\t\t\tnotation);\n\t\t\t} else if (notation.match(notationRegex) && notation.length > 1 && !isFuzzy) {\n\t\t\t\treturn this.move(parseNotation(notation), true);\n\t\t\t} else if (isFuzzy) {\n\t\t\t\tthrow new Error(`Invalid move (${notation})`);\n\t\t\t}\n\n\t\t\tif (move) {\n\t\t\t\t// apply pawn promotion\n\t\t\t\tif (promo) {\n\t\t\t\t\tswitch (promo) {\n\t\t\t\t\t\tcase 'B':\n\t\t\t\t\t\t\tp = Piece.createBishop(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'N':\n\t\t\t\t\t\t\tp = Piece.createKnight(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\t\tp = Piece.createQueen(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'R':\n\t\t\t\t\t\t\tp = Piece.createRook(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tp = Piece.createPawn(side);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (p) {\n\t\t\t\t\t\tthis.game.board.promote(move.move.postSquare, p);\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tp.moveCount = move.move.postSquare.piece.moveCount;\n\t\t\t\t\t\tmove.move.postSquare.piece = p;\n\t\t\t\t\t\t//*/\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdateGameClient(this);\n\n\t\t\t\treturn move;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Notation is invalid (${notation})`);\n\t}\n}\n\nexport default { AlgebraicGameClient };"],"file":"algebraicGameClient.js"}},"error":null,"hash":"d6464622d2d8f1f2afd1c738b9be5906","cacheData":{"env":{}}}