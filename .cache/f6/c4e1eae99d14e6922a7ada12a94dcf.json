{"id":"node_modules/chess/dist/pieceValidation.js","dependencies":[{"name":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/shiva/VSCodeProjects/chess-openings/package.json","includedInParent":true,"mtime":1579734359778},{"name":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/package.json","includedInParent":true,"mtime":1579734224743},{"name":"@babel/runtime-corejs2/helpers/interopRequireDefault","loc":{"line":3,"column":37},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault.js"},{"name":"@babel/runtime-corejs2/core-js/object/define-property","loc":{"line":5,"column":37},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/core-js/object/define-property.js"},{"name":"@babel/runtime-corejs2/helpers/possibleConstructorReturn","loc":{"line":13,"column":65},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/possibleConstructorReturn.js"},{"name":"@babel/runtime-corejs2/helpers/getPrototypeOf","loc":{"line":15,"column":54},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/getPrototypeOf.js"},{"name":"@babel/runtime-corejs2/helpers/inherits","loc":{"line":17,"column":48},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/inherits.js"},{"name":"@babel/runtime-corejs2/core-js/promise","loc":{"line":19,"column":46},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/core-js/promise.js"},{"name":"@babel/runtime-corejs2/helpers/classCallCheck","loc":{"line":21,"column":54},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/classCallCheck.js"},{"name":"@babel/runtime-corejs2/helpers/createClass","loc":{"line":23,"column":51},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/@babel/runtime-corejs2/helpers/createClass.js"},{"name":"./piece","loc":{"line":25,"column":21},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/piece.js"},{"name":"./board","loc":{"line":27,"column":21},"parent":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/pieceValidation.js","resolved":"/Users/shiva/VSCodeProjects/chess-openings/node_modules/chess/dist/board.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = exports.RookValidation = exports.QueenValidation = exports.PawnValidation = exports.KnightValidation = exports.KingValidation = exports.BishopValidation = exports.PieceValidation = void 0;\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _piece = require(\"./piece\");\n\nvar _board = require(\"./board\");\n\n/**\n\tThe general idea behind PieceValidation is to examine an individual piece\n\tand determine (with the information available from about that single piece)\n\twhat move options are available for that piece.\n\n\tThe PieceValidation doesn't alter any properties of the piece, the board\n\tor any squares. Additionally, the PieceValidation is suitable for 1 phase of\n\tthe evaluation of viable move options for a piece... the BoardValidation\n\tcomponent handles the overall evaluation of what moves are possible for the\n\tboard in its current state.\n*/\nvar PieceValidation =\n/*#__PURE__*/\nfunction () {\n  function PieceValidation(board) {\n    (0, _classCallCheck2[\"default\"])(this, PieceValidation);\n    this.allowBackward = false;\n    this.allowDiagonal = false;\n    this.allowForward = false;\n    this.allowHorizontal = false;\n    this.board = board;\n    this.type = null;\n    this.repeat = 0;\n  }\n\n  (0, _createClass2[\"default\"])(PieceValidation, [{\n    key: \"applySpecialValidation\",\n    value: function applySpecialValidation() {// do nothing...\n      // overridden in the concrete validation classes\n      // where special logic is required\n    }\n  }, {\n    key: \"start\",\n    value: function start(src, callback) {\n      // ensure callback is set\n      callback = callback || function (err, destinationSquares) {\n        return new _promise[\"default\"](function (resolve, reject) {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(destinationSquares);\n        });\n      };\n\n      var opt = {\n        destSquares: [],\n        origin: src,\n        piece: src ? src.piece : null\n      };\n\n      var findMoveOptions = function findMoveOptions(b, r, n) {\n        var block = false,\n            capture = false,\n            currentSquare = b.getNeighborSquare(opt.origin, n),\n            i = 0;\n\n        while (currentSquare && i < r) {\n          block = currentSquare.piece !== null && (opt.piece.type === _piece.PieceType.Pawn || currentSquare.piece.side === opt.piece.side);\n          capture = currentSquare.piece && !block;\n\n          if (!block) {\n            opt.destSquares.push(currentSquare);\n          }\n\n          if (capture || block) {\n            currentSquare = null;\n          } else {\n            currentSquare = b.getNeighborSquare(currentSquare, n);\n            i++;\n          }\n        }\n      };\n\n      if (!opt.piece || opt.piece.type !== this.type) {\n        return callback(new Error('piece is invalid'));\n      }\n\n      if (this.board && opt.origin) {\n        // forward squares\n        if (this.allowForward) {\n          findMoveOptions(this.board, this.repeat, opt.piece.side === _piece.SideType.White ? _board.NeighborType.Above : _board.NeighborType.Below);\n        } // backward squares\n\n\n        if (this.allowBackward) {\n          findMoveOptions(this.board, this.repeat, opt.piece.side === _piece.SideType.White ? _board.NeighborType.Below : _board.NeighborType.Above);\n        } // horizontal squares\n\n\n        if (this.allowHorizontal) {\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.Left);\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.Right);\n        } // diagonal squares\n\n\n        if (this.allowDiagonal) {\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.AboveLeft);\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.BelowRight);\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.BelowLeft);\n          findMoveOptions(this.board, this.repeat, _board.NeighborType.AboveRight);\n        } // apply additional validation logic\n\n\n        this.applySpecialValidation(opt); // callback\n\n        return callback(null, opt.destSquares);\n      }\n\n      return callback(new Error('board is invalid'));\n    }\n  }], [{\n    key: \"create\",\n    value: function create(piece, board) {\n      switch (piece) {\n        case _piece.PieceType.Bishop:\n          return new BishopValidation(board);\n\n        case _piece.PieceType.King:\n          return new KingValidation(board);\n\n        case _piece.PieceType.Knight:\n          return new KnightValidation(board);\n\n        case _piece.PieceType.Pawn:\n          return new PawnValidation(board);\n\n        case _piece.PieceType.Queen:\n          return new QueenValidation(board);\n\n        case _piece.PieceType.Rook:\n          return new RookValidation(board);\n\n        default:\n          return null;\n      }\n    }\n  }]);\n  return PieceValidation;\n}();\n\nexports.PieceValidation = PieceValidation;\n\nvar BishopValidation =\n/*#__PURE__*/\nfunction (_PieceValidation) {\n  (0, _inherits2[\"default\"])(BishopValidation, _PieceValidation);\n\n  function BishopValidation(board) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, BishopValidation);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(BishopValidation).call(this, board)); // base validation properties\n\n    _this.allowDiagonal = true;\n    _this.type = _piece.PieceType.Bishop;\n    _this.repeat = 8;\n    return _this;\n  }\n\n  return BishopValidation;\n}(PieceValidation);\n\nexports.BishopValidation = BishopValidation;\n\nvar KingValidation =\n/*#__PURE__*/\nfunction (_PieceValidation2) {\n  (0, _inherits2[\"default\"])(KingValidation, _PieceValidation2);\n\n  function KingValidation(board) {\n    var _this2;\n\n    (0, _classCallCheck2[\"default\"])(this, KingValidation);\n    _this2 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(KingValidation).call(this, board)); // base validation properties\n\n    _this2.allowBackward = true;\n    _this2.allowDiagonal = true;\n    _this2.allowForward = true;\n    _this2.allowHorizontal = true;\n    _this2.type = _piece.PieceType.King;\n    _this2.repeat = 1;\n    return _this2;\n  }\n\n  (0, _createClass2[\"default\"])(KingValidation, [{\n    key: \"applySpecialValidation\",\n    value: function applySpecialValidation() {// check for castle?\n    }\n  }]);\n  return KingValidation;\n}(PieceValidation);\n\nexports.KingValidation = KingValidation;\n\nvar KnightValidation =\n/*#__PURE__*/\nfunction (_PieceValidation3) {\n  (0, _inherits2[\"default\"])(KnightValidation, _PieceValidation3);\n\n  function KnightValidation(board) {\n    var _this3;\n\n    (0, _classCallCheck2[\"default\"])(this, KnightValidation);\n    _this3 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(KnightValidation).call(this, board)); // base validation properties\n\n    _this3.type = _piece.PieceType.Knight;\n    _this3.repeat = 1;\n    return _this3;\n  }\n\n  (0, _createClass2[\"default\"])(KnightValidation, [{\n    key: \"applySpecialValidation\",\n    value: function applySpecialValidation(opt) {\n      // add knight move options\n      var aboveLeft = this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveLeft),\n          aboveRight = this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveRight),\n          belowLeft = this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowLeft),\n          belowRight = this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowRight),\n          i = 0,\n          p = null,\n          squares = [];\n\n      if (aboveLeft) {\n        squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Above));\n        squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Left));\n      }\n\n      if (aboveRight) {\n        squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Above));\n        squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Right));\n      }\n\n      if (belowLeft) {\n        squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Below));\n        squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Left));\n      }\n\n      if (belowRight) {\n        squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Below));\n        squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Right));\n      }\n\n      for (i = 0; i < squares.length; i++) {\n        if (squares[i]) {\n          // check for enemy piece on square\n          p = squares[i] ? squares[i].piece : null;\n\n          if (!p || p.side !== opt.piece.side) {\n            opt.destSquares.push(squares[i]);\n          }\n        }\n      }\n    }\n  }]);\n  return KnightValidation;\n}(PieceValidation);\n\nexports.KnightValidation = KnightValidation;\n\nvar PawnValidation =\n/*#__PURE__*/\nfunction (_PieceValidation4) {\n  (0, _inherits2[\"default\"])(PawnValidation, _PieceValidation4);\n\n  function PawnValidation(board) {\n    var _this4;\n\n    (0, _classCallCheck2[\"default\"])(this, PawnValidation);\n    _this4 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(PawnValidation).call(this, board)); // base validation properties\n\n    _this4.allowForward = true;\n    _this4.type = _piece.PieceType.Pawn;\n    _this4.repeat = 1;\n    return _this4;\n  }\n  /* eslint no-magic-numbers:0 */\n\n\n  (0, _createClass2[\"default\"])(PawnValidation, [{\n    key: \"applySpecialValidation\",\n    value: function applySpecialValidation(opt) {\n      // check for capture\n      var i = 0,\n          p = null,\n          sq = null,\n          squares = [this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? _board.NeighborType.AboveLeft : _board.NeighborType.BelowLeft), this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? _board.NeighborType.AboveRight : _board.NeighborType.BelowRight)]; // check for capture\n\n      for (i = 0; i < squares.length; i++) {\n        // check for enemy piece on square\n        p = squares[i] ? squares[i].piece : null;\n\n        if (p && p.side !== opt.piece.side) {\n          opt.destSquares.push(squares[i]);\n        }\n      } // check for double square first move\n\n\n      if (opt.piece.moveCount === 0 && opt.destSquares.length && // Fix for issue #15 (originally looked for length of 1)\n      opt.destSquares[0].piece === null) {\n        // Fix for issue #1\n        sq = this.board.getNeighborSquare(opt.destSquares[0], opt.piece.side === _piece.SideType.White ? _board.NeighborType.Above : _board.NeighborType.Below);\n\n        if (!sq.piece) {\n          opt.destSquares.push(sq);\n        } // check for en passant\n\n      } else if (opt.origin.rank === (opt.piece.side === _piece.SideType.White ? 5 : 4)) {\n        // get squares left & right of pawn\n        squares = [this.board.getNeighborSquare(opt.origin, _board.NeighborType.Left), this.board.getNeighborSquare(opt.origin, _board.NeighborType.Right)];\n        i = 0;\n\n        for (i = 0; i < squares.length; i++) {\n          // check for pawn on square\n          p = squares[i] ? squares[i].piece : null;\n\n          if (p && p.type === _piece.PieceType.Pawn && p.side !== opt.piece.side && p.moveCount === 1 && this.board.lastMovedPiece === p) {\n            opt.destSquares.push(this.board.getNeighborSquare(squares[i], p.side === _piece.SideType.Black ? _board.NeighborType.Above : _board.NeighborType.Below));\n          }\n        }\n      }\n    }\n  }]);\n  return PawnValidation;\n}(PieceValidation);\n\nexports.PawnValidation = PawnValidation;\n\nvar QueenValidation =\n/*#__PURE__*/\nfunction (_PieceValidation5) {\n  (0, _inherits2[\"default\"])(QueenValidation, _PieceValidation5);\n\n  function QueenValidation(board) {\n    var _this5;\n\n    (0, _classCallCheck2[\"default\"])(this, QueenValidation);\n    _this5 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(QueenValidation).call(this, board)); // base validation properties\n\n    _this5.allowBackward = true;\n    _this5.allowDiagonal = true;\n    _this5.allowForward = true;\n    _this5.allowHorizontal = true;\n    _this5.repeat = 8;\n    _this5.type = _piece.PieceType.Queen;\n    return _this5;\n  }\n\n  return QueenValidation;\n}(PieceValidation);\n\nexports.QueenValidation = QueenValidation;\n\nvar RookValidation =\n/*#__PURE__*/\nfunction (_PieceValidation6) {\n  (0, _inherits2[\"default\"])(RookValidation, _PieceValidation6);\n\n  function RookValidation(board) {\n    var _this6;\n\n    (0, _classCallCheck2[\"default\"])(this, RookValidation);\n    _this6 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(RookValidation).call(this, board)); // base validation properties\n\n    _this6.allowBackward = true;\n    _this6.allowForward = true;\n    _this6.allowHorizontal = true;\n    _this6.repeat = 8;\n    _this6.type = _piece.PieceType.Rook;\n    return _this6;\n  }\n\n  return RookValidation;\n}(PieceValidation);\n\nexports.RookValidation = RookValidation;\nvar _default = {\n  PieceValidation: PieceValidation\n};\nexports[\"default\"] = _default;\n\n"},"sourceMaps":{"js":{"version":3,"sources":["pieceValidation.js"],"names":["PieceValidation","board","allowBackward","allowDiagonal","allowForward","allowHorizontal","type","repeat","src","callback","err","destinationSquares","resolve","reject","opt","destSquares","origin","piece","findMoveOptions","b","r","n","block","capture","currentSquare","getNeighborSquare","i","PieceType","Pawn","side","push","Error","SideType","White","NeighborType","Above","Below","Left","Right","AboveLeft","BelowRight","BelowLeft","AboveRight","applySpecialValidation","Bishop","BishopValidation","King","KingValidation","Knight","KnightValidation","PawnValidation","Queen","QueenValidation","Rook","RookValidation","aboveLeft","aboveRight","belowLeft","belowRight","p","squares","length","sq","moveCount","rank","lastMovedPiece","Black"],"mappings":"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","sourcesContent":["/**\n\tThe general idea behind PieceValidation is to examine an individual piece\n\tand determine (with the information available from about that single piece)\n\twhat move options are available for that piece.\n\n\tThe PieceValidation doesn't alter any properties of the piece, the board\n\tor any squares. Additionally, the PieceValidation is suitable for 1 phase of\n\tthe evaluation of viable move options for a piece... the BoardValidation\n\tcomponent handles the overall evaluation of what moves are possible for the\n\tboard in its current state.\n*/\nimport { PieceType, SideType } from './piece';\nimport { NeighborType } from './board';\n\nexport class PieceValidation {\n\tconstructor (board) {\n\t\tthis.allowBackward = false;\n\t\tthis.allowDiagonal = false;\n\t\tthis.allowForward = false;\n\t\tthis.allowHorizontal = false;\n\t\tthis.board = board;\n\t\tthis.type = null;\n\t\tthis.repeat = 0;\n\t}\n\n\tapplySpecialValidation () {\n\t\t// do nothing...\n\t\t// overridden in the concrete validation classes\n\t\t// where special logic is required\n\t}\n\n\tstatic create (piece, board) {\n\t\tswitch (piece) {\n\t\t\tcase PieceType.Bishop:\n\t\t\t\treturn new BishopValidation(board);\n\t\t\tcase PieceType.King:\n\t\t\t\treturn new KingValidation(board);\n\t\t\tcase PieceType.Knight:\n\t\t\t\treturn new KnightValidation(board);\n\t\t\tcase PieceType.Pawn:\n\t\t\t\treturn new PawnValidation(board);\n\t\t\tcase PieceType.Queen:\n\t\t\t\treturn new QueenValidation(board);\n\t\t\tcase PieceType.Rook:\n\t\t\t\treturn new RookValidation(board);\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tstart (src, callback) {\n\t\t// ensure callback is set\n\t\tcallback = callback || ((err, destinationSquares) => new Promise((resolve, reject) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(destinationSquares);\n\t\t}));\n\n\t\tlet opt = {\n\t\t\tdestSquares : [],\n\t\t\torigin : src,\n\t\t\tpiece : src ? src.piece : null\n\t\t};\n\n\t\tconst findMoveOptions = function (b, r, n) {\n\t\t\tlet\n\t\t\t\tblock = false,\n\t\t\t\tcapture = false,\n\t\t\t\tcurrentSquare = b.getNeighborSquare(opt.origin, n),\n\t\t\t\ti = 0;\n\n\t\t\twhile (currentSquare && i < r) {\n\t\t\t\tblock = currentSquare.piece !== null &&\n\t\t\t\t\t(opt.piece.type === PieceType.Pawn ||\n\t\t\t\t\t\tcurrentSquare.piece.side === opt.piece.side);\n\t\t\t\tcapture = (currentSquare.piece && !block);\n\n\t\t\t\tif (!block) {\n\t\t\t\t\topt.destSquares.push(currentSquare);\n\t\t\t\t}\n\n\t\t\t\tif (capture || block) {\n\t\t\t\t\tcurrentSquare = null;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentSquare = b.getNeighborSquare(currentSquare, n);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (!opt.piece || opt.piece.type !== this.type) {\n\t\t\treturn callback(new Error('piece is invalid'));\n\t\t}\n\n\t\tif (this.board && opt.origin) {\n\t\t\t// forward squares\n\t\t\tif (this.allowForward) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\t\tNeighborType.Below);\n\t\t\t}\n\n\t\t\t// backward squares\n\t\t\tif (this.allowBackward) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.Below :\n\t\t\t\t\t\t\tNeighborType.Above);\n\t\t\t}\n\n\t\t\t// horizontal squares\n\t\t\tif (this.allowHorizontal) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.Left);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.Right);\n\t\t\t}\n\n\t\t\t// diagonal squares\n\t\t\tif (this.allowDiagonal) {\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.AboveLeft);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.BelowRight);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.BelowLeft);\n\t\t\t\tfindMoveOptions(this.board, this.repeat, NeighborType.AboveRight);\n\t\t\t}\n\n\t\t\t// apply additional validation logic\n\t\t\tthis.applySpecialValidation(opt);\n\n\t\t\t// callback\n\t\t\treturn callback(null, opt.destSquares);\n\t\t}\n\n\t\treturn callback(new Error('board is invalid'));\n\t}\n}\n\nexport class BishopValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowDiagonal = true;\n\t\tthis.type = PieceType.Bishop;\n\t\tthis.repeat = 8;\n\t}\n}\n\nexport class KingValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowDiagonal = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.type = PieceType.King;\n\t\tthis.repeat = 1;\n\t}\n\n\tapplySpecialValidation () {\n\t\t// check for castle?\n\t}\n}\n\nexport class KnightValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.type = PieceType.Knight;\n\t\tthis.repeat = 1;\n\t}\n\n\tapplySpecialValidation (opt) {\n\t\t// add knight move options\n\t\tlet\n\t\t\taboveLeft = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.AboveLeft),\n\t\t\taboveRight = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.AboveRight),\n\t\t\tbelowLeft = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.BelowLeft),\n\t\t\tbelowRight = this.board.getNeighborSquare(\n\t\t\t\topt.origin,\n\t\t\t\tNeighborType.BelowRight),\n\t\t\ti = 0,\n\t\t\tp = null,\n\t\t\tsquares = [];\n\n\t\tif (aboveLeft) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveLeft,\n\t\t\t\tNeighborType.Above));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveLeft,\n\t\t\t\tNeighborType.Left));\n\t\t}\n\n\t\tif (aboveRight) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveRight,\n\t\t\t\tNeighborType.Above));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\taboveRight,\n\t\t\t\tNeighborType.Right));\n\t\t}\n\n\t\tif (belowLeft) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowLeft,\n\t\t\t\tNeighborType.Below));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowLeft,\n\t\t\t\tNeighborType.Left));\n\t\t}\n\n\t\tif (belowRight) {\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowRight,\n\t\t\t\tNeighborType.Below));\n\n\t\t\tsquares.push(this.board.getNeighborSquare(\n\t\t\t\tbelowRight,\n\t\t\t\tNeighborType.Right));\n\t\t}\n\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\tif (squares[i]) {\n\t\t\t\t// check for enemy piece on square\n\t\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\t\tif (!p || p.side !== opt.piece.side) {\n\t\t\t\t\topt.destSquares.push(squares[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class PawnValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowForward = true;\n\t\tthis.type = PieceType.Pawn;\n\t\tthis.repeat = 1;\n\t}\n\n\t/* eslint no-magic-numbers:0 */\n\tapplySpecialValidation (opt) {\n\t\t// check for capture\n\t\tlet\n\t\t\ti = 0,\n\t\t\tp = null,\n\t\t\tsq = null,\n\t\t\tsquares = [\n\t\t\t\tthis.board.getNeighborSquare(opt.origin,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.AboveLeft :\n\t\t\t\t\t\t\tNeighborType.BelowLeft),\n\t\t\t\tthis.board.getNeighborSquare(opt.origin,\n\t\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\t\tNeighborType.AboveRight :\n\t\t\t\t\t\t\tNeighborType.BelowRight)];\n\n\t\t// check for capture\n\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t// check for enemy piece on square\n\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\tif (p && p.side !== opt.piece.side) {\n\t\t\t\topt.destSquares.push(squares[i]);\n\t\t\t}\n\t\t}\n\n\t\t// check for double square first move\n\t\tif (opt.piece.moveCount === 0 &&\n\t\t\t\topt.destSquares.length && // Fix for issue #15 (originally looked for length of 1)\n\t\t\t\topt.destSquares[0].piece === null) { // Fix for issue #1\n\t\t\tsq = this.board.getNeighborSquare(\n\t\t\t\topt.destSquares[0],\n\t\t\t\topt.piece.side === SideType.White ?\n\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\tNeighborType.Below);\n\n\t\t\tif (!sq.piece) {\n\t\t\t\topt.destSquares.push(sq);\n\t\t\t}\n\n\t\t// check for en passant\n\t\t} else if (opt.origin.rank ===\n\t\t\t\t(opt.piece.side === SideType.White ? 5 : 4)) {\n\t\t\t// get squares left & right of pawn\n\t\t\tsquares = [\n\t\t\t\tthis.board.getNeighborSquare(opt.origin, NeighborType.Left),\n\t\t\t\tthis.board.getNeighborSquare(opt.origin, NeighborType.Right)];\n\t\t\ti = 0;\n\n\t\t\tfor (i = 0; i < squares.length; i++) {\n\t\t\t\t// check for pawn on square\n\t\t\t\tp = squares[i] ? squares[i].piece : null;\n\t\t\t\tif (p &&\n\t\t\t\t\t\tp.type === PieceType.Pawn &&\n\t\t\t\t\t\tp.side !== opt.piece.side &&\n\t\t\t\t\t\tp.moveCount === 1 &&\n\t\t\t\t\t\tthis.board.lastMovedPiece === p) {\n\n\t\t\t\t\topt.destSquares.push(\n\t\t\t\t\t\tthis.board.getNeighborSquare(\n\t\t\t\t\t\t\tsquares[i],\n\t\t\t\t\t\t\tp.side === SideType.Black ?\n\t\t\t\t\t\t\t\t\tNeighborType.Above :\n\t\t\t\t\t\t\t\t\tNeighborType.Below));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class QueenValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowDiagonal = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.repeat = 8;\n\t\tthis.type = PieceType.Queen;\n\t}\n}\n\nexport class RookValidation extends PieceValidation {\n\tconstructor (board) {\n\t\tsuper(board);\n\n\t\t// base validation properties\n\t\tthis.allowBackward = true;\n\t\tthis.allowForward = true;\n\t\tthis.allowHorizontal = true;\n\t\tthis.repeat = 8;\n\t\tthis.type = PieceType.Rook;\n\t}\n}\n\nexport default { PieceValidation };\n"],"file":"pieceValidation.js"}},"error":null,"hash":"362d8f31703624e13bfd18d684364f0d","cacheData":{"env":{}}}